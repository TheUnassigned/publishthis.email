# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: publishthisemail # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    PTE_AWS_REGION: ${file(./serverless.env.yml):${opt:stage}.PTE_AWS_REGION}
    PTE_CF_KEY: ${file(./serverless.env.yml):${opt:stage}.PTE_CF_KEY}
    PTE_CF_EMAIL: ${file(./serverless.env.yml):${opt:stage}.PTE_CF_EMAIL}
    PTE_CF_ZONEID: ${file(./serverless.env.yml):${opt:stage}.PTE_CF_ZONEID}
    PTE_IMGUR_ID: ${file(./serverless.env.yml):${opt:stage}.PTE_IMGUR_ID}
    PTE_IMGUR_SECRET: ${file(./serverless.env.yml):${opt:stage}.PTE_IMGUR_SECRET}
    PTE_EMAIL_TABLE: ${file(./serverless.env.yml):${opt:stage}.PTE_EMAIL_TABLE}
    PTE_S3_BUCKET: ${file(./serverless.env.yml):${opt:stage}.PTE_S3_BUCKET}
    PTE_S3_BUCKET_LIST: ${file(./serverless.env.yml):${opt:stage}.PTE_S3_BUCKET_LIST}
    PTE_COLLECTION_TABLE: ${file(./serverless.env.yml):${opt:stage}.PTE_COLLECTION_TABLE}
    PTE_COLLECTION_ITEM_TABLE: ${file(./serverless.env.yml):${opt:stage}.PTE_COLLECTION_ITEM_TABLE}
    PTE_LISTS_TABLE: ${file(./serverless.env.yml):${opt:stage}.PTE_LISTS_TABLE}
    PTE_LIST_SUBSCRIBERS_TABLE: ${file(./serverless.env.yml):${opt:stage}.PTE_LIST_SUBSCRIBERS_TABLE}
  memorySize: 256
  timeout: 20
  profile: pte
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:us-east-1:*:*

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  receive:
    handler: handler.receive
  list-receive:
    handler: handler.listReceive
  list-subscribe:
    handler: handler.listSubscribe
    events:
      - http:
          path: list/subscribe
          method: get
          cors: true
  list-bulk-subscribe:
    handler: handler.listBulkSubscribe
    events:
      - http:
          path: list/bulk-subscribe
          method: post
          cors: true
  list-unsubscribe:
    handler: handler.listUnsubscribe
    events:
      - http:
          path: list/unsubscribe
          method: get
          cors: true
  verify-subscriber:
    handler: handler.verifySubscriber
    events:
      - http:
          path: list/verify
          method: get
          cors: true
  deliver:
    handler: handler.listDeliver
    events:
      - http:
          path: list/deliver
          method: get
          cors: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
